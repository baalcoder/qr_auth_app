// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class AuthResult {
  AuthResult({
    this.success,
    this.error,
  });

  bool? success;

  String? error;

  Object encode() {
    return <Object?>[
      success,
      error,
    ];
  }

  static AuthResult decode(Object result) {
    result as List<Object?>;
    return AuthResult(
      success: result[0] as bool?,
      error: result[1] as String?,
    );
  }
}

class AuthConfig {
  AuthConfig({
    this.title,
    this.subtitle,
    this.negativeButtonText,
  });

  String? title;

  String? subtitle;

  String? negativeButtonText;

  Object encode() {
    return <Object?>[
      title,
      subtitle,
      negativeButtonText,
    ];
  }

  static AuthConfig decode(Object result) {
    result as List<Object?>;
    return AuthConfig(
      title: result[0] as String?,
      subtitle: result[1] as String?,
      negativeButtonText: result[2] as String?,
    );
  }
}

class _BiometricApiCodec extends StandardMessageCodec {
  const _BiometricApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AuthConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AuthResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AuthConfig.decode(readValue(buffer)!);
      case 129: 
        return AuthResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class BiometricApi {
  /// Constructor for [BiometricApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BiometricApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _BiometricApiCodec();

  Future<AuthResult> authenticate(AuthConfig arg_config) async {
    const String channelName = 'dev.flutter.pigeon.qr_auth_app.BiometricApi.authenticate';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AuthResult?)!;
    }
  }

  Future<bool> isBiometricAvailable() async {
    const String channelName = 'dev.flutter.pigeon.qr_auth_app.BiometricApi.isBiometricAvailable';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class QRScannerApi {
  /// Constructor for [QRScannerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  QRScannerApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> startScanner() async {
    const String channelName = 'dev.flutter.pigeon.qr_auth_app.QRScannerApi.startScanner';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopScanner() async {
    const String channelName = 'dev.flutter.pigeon.qr_auth_app.QRScannerApi.stopScanner';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class QRScannerFlutterApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void onQRCodeDetected(String qrCode);

  static void setup(QRScannerFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.qr_auth_app.QRScannerFlutterApi.onQRCodeDetected', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.qr_auth_app.QRScannerFlutterApi.onQRCodeDetected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_qrCode = (args[0] as String?);
          assert(arg_qrCode != null,
              'Argument for dev.flutter.pigeon.qr_auth_app.QRScannerFlutterApi.onQRCodeDetected was null, expected non-null String.');
          try {
            api.onQRCodeDetected(arg_qrCode!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
